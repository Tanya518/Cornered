<html lang="en-us"><script src="https://pygame-web.github.io/archives/0.9/pythons.js" type=module id=site data-LINES=57 data-CONSOLE=25 data-python=python3.12 data-os=vtx,fs,snd,gui async defer>#<!--

print("""
Loading {{ cookiecutter.title }} from {{ cookiecutter.archive }}
    Pygbag Version : {{ cookiecutter.version }}
    Template Version : 0.9.0
    Python  : {{ cookiecutter.python }}
    CDN URL : {{ cookiecutter.cdn }}
    Screen  : {{ cookiecutter.width }}x{{ cookiecutter.height }}
    Title   : {{ cookiecutter.title }}
    Folder  : {{ cookiecutter.directory }}
    Authors : {{ cookiecutter.authors }}
    SPDX-License-Identifier: {{ cookiecutter.spdx }}

""")


# screen pixels (real, hardware)
WIDTH={{ cookiecutter.width }}  # 1280
HEIGHT={{ cookiecutter.height }}  # 720

# reference/idealized screen pixels
REFX = 1980
REFY = 1080

def u(real, ref, v):
    if abs(v)<0.9999999:
        result = int( (float(real)/100.0) * (v*1000))
        if v<0:
            return real-result
        return result
    return int( (real/ref) * v )

def ux(*argv):
    global WIDTH, REFX
    acc = 0
    for v in argv:
        acc += u(WIDTH, REFX, v)
    return acc

def uy(*argv):
    global HEIGHT, REFY
    acc = 0
    for v in argv:
        acc += u(HEIGHT, REFY, v)
    return acc




# do not rename
async def custom_site():

    import sys
    import asyncio
    import platform
    import json
    from pathlib import Path



    import embed


    # BLACK BACKGROUND - NO BLUE!
    platform.document.body.style.background = "#000000"

    import pygame

    def compose():
        pygame.display.update()
        window.chromakey(None, *screen.get_colorkey(), 40)

    pygame.init()
    pygame.font.init()

    screen = pygame.display.set_mode([ux(.100),uy(.100)], pygame.SRCALPHA, 32)
    screen.set_colorkey( (0,0,0,0), pygame.RLEACCEL )
    screen.fill( (0,0,0,0) )

    compose()

    platform.window.transfer.hidden = true
    platform.window.canvas.style.visibility = "visible"



    apk = "{{ cookiecutter.archive }}"

    bundle = "{{ cookiecutter.directory }}"

    # the C or js loader could do that but be explicit.
    appdir = Path(f"/data/data/{bundle}") # /data/data/{{ cookiecutter.directory }}
    appdir.mkdir()


    # mount apk

    cfg = {
        "io": "url",
        "type":"mount",
        "mount" : {
            "point" : appdir.as_posix(),
            "path" : f"/data/data/{bundle}",
        },
        "path" : f"./{apk}",
    }

    track = platform.window.MM.prepare(apk, json.dumps(cfg))

    while not track.ready:
        await asyncio.sleep(.1)

    sys.path.insert(0, str(appdir))

    # keep a good shell behaviour and allow to see the welcome screen
    await asyncio.sleep(.5)

    # now that apk is mounted we have access to main code
    print(f"36: loading [{bundle}]", appdir, track)

    try:
        import main
    except ModuleNotFoundError:
        print("ERROR: your main python file must be called main.py to run correctly under pygbag")

    await asyncio.sleep(0)

    # run main in panda3d if detected, else pygame
    import sys
    if hasattr(main,'ShowBase'):
        print("panda3d detected")
        if "ShowBase" in sys.modules:
            print("Launching panda3d")
            import builtins
            ShowBase = sys.modules["ShowBase"].ShowBase
            builtins.base = main.MyApp()

            # fix for https://github.com/panda3d/panda3d/pull/1353
            if hasattr(base, "audio3d"):
                try:
                    import panda3d.core as p3d
                    base.audio3d.setSoundMinDistance(1.0)
                except:
                    pass

            # do not run in async mode, but make sure loop is there
            # because finalizers will use it.
            while True:
                try:
                    base.task_mgr.step()
                    await asyncio.sleep(0)
                    continue
                except SystemExit:
                    print("panda3d main loop terminated")
                    break


    print("pygame detected")

    try:
        await main.main()
    except AttributeError:
        print("ERROR: async main() missing or not async")

    print("python code completed, press F5 to restart")

#--></script><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, user-scalable=no" /><meta name="apple-mobile-web-app-capable" content="yes" /><meta name="mobile-web-app-capable" content="yes" /><meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
<title>Cornered - –ú–æ—è –ü–µ—Ä—à–∞ –ì—Ä–∞</title>
<link rel="prefetch" href=./{{ cookiecutter.archive }} as="fetch" type="application/zip" crossorigin="anonymous"/>
<link rel="icon" type="image/png" href="favicon.png" />
<style>
body {
    margin: 0;
    padding: 0;
    background: #000 !important;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    font-family: Verdana, Arial, sans-serif;
    color: #A6F060;
}
#loading {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    z-index: 9999;
}
#loading h1 {
    font-size: 3em;
    margin: 0;
    text-shadow: 0 0 20px rgba(166, 240, 96, 0.8);
    animation: pulse 2s infinite;
}
#loading p {
    font-size: 1.2em;
    margin-top: 20px;
    opacity: 0.7;
}
@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}
canvas {
    display: block;
    margin: 0 auto;
    image-rendering: pixelated;
    image-rendering: crisp-edges;
}
</style>
</head><body>
<div id="loading">
    <h1>üéÆ CORNERED</h1>
    <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∏...</p>
</div>
<script>
// Hide loading after game starts
setTimeout(function() {
    var loading = document.getElementById('loading');
    if (loading) loading.style.display = 'none';
}, 5000);
</script>
</body></html>
